# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      #!/bin/sh
      #set -x
      export CICD_DIR=$(readlink -f "./.cicd")
      mkdir -p $CICD_DIR
      export M2_HOME=${bamboo_capability_system_builder_mvn3_Maven_3}
      export PATH=$PATH:${M2_HOME}/bin
      mvn --version
      uuid=$(uuidgen)
      master=$(mvn --encrypt-master-password ${uuid})
      cat >${CICD_DIR}/settings-security.xml <<EOL
      <settingsSecurity>
        <master>${master}</master>
      </settingsSecurity>
      EOL
      chmod 600 ${CICD_DIR}/settings-security.xml
      password=$(mvn -Dsettings.security=${CICD_DIR}/settings-security.xml -ep
      "${service_account_password}")
      cat >${CICD_DIR}/settings.xml <<EOL
      <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
      http://maven.apache.org/xsd/settings-1.0.0.xsd">
      <servers>
         <server>
            <id>artifactory</id>
            <username>${account_username}</username>
            <password>${password}</password>
         </server>
      </servers>
      <mirrors>
         <mirror>
         <id>artifactory</id>
         <name>Artifactory_Staging-releases</name>
         <url>https://artifactory/</url>
         <mirrorOf>central</mirrorOf>
         </mirror>
      </mirrors>
      </settings>
      EOL
      chmod 600 ${CICD_DIR}/settings.xml
      cat >${CICD_DIR}/build.properties <<EOF
      MAVEN_EXEC=${M2_HOME}/bin/mvn
      MAVEN_SETTINGS=${CICD_DIR}/settings.xml
      MAVEN_SECURITY_SETTINGS=${CICD_DIR}/settings-security.xml
      CICD_DIR=${CICD_DIR}
      EOF
- task: Maven@3
#- task: Maven@3.205.1
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'package'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      
      #!/bin/sh
      ${azure_buildprops_MAVEN_EXEC} -B -s ${azure_buildprops_MAVEN_SETTINGS}
      -Dsettings.security=${azure_buildprops_MAVEN_SECURITY_SETTINGS} $@ 2>&1 | tee
      ${azure_buildprops_CICD_DIR}/mvn.log
      rc=$?; echo "exit code $rc"; if [[ $rc != 0 ]]; then ( echo 'could not perform
      build'; exit $rc; ) fi
      if [ -d ${azure_build_working_directory}/target/checkout ]; then
        cd ${azure_build_working_directory}/target/checkout
      else
        cd ${azure_build_working_directory}
      fi
      ls -la '**/*.war'
      if grep " BUILD FAILURE" ${azure_buildprops_CICD_DIR}/mvn.log
        then
         echo 'found errors in build log';
      exit 1;
      fi
      export artifactJar=$(**/*.war)
      export artifactJarSHA1=$(sha1sum ${artifactJar} | sed -rn 's/(\w+)\W.*/\1/p')
      export artifactJarSHA256=$(sha256sum ${artifactJar} | sed -rn 's/(\w+)\W.*/\1/p')
      
      org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout)
      export artifactId=$(${azure_buildprops_MAVEN_EXEC}
      org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate
      -Dexpression=project.artifactId -q -DforceStdout)
      export groupId=$(${azure_buildprops_MAVEN_EXEC}
      org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate
      -Dexpression=project.groupId -q -DforceStdout)
      ${azure_buildprops_MAVEN_EXEC} -Dmaven.buildNumber.revisionOnScmFailure=NOREVISION -Dmaven.buildNumber.shortRevisionLength=7 buildnumber:create-metadata
      cat target/generated/build-metadata/build.properties | egrep -v
      "^[#|name|timestamp]" | sed 's/^/artifact\.build\./'
      >${azure_buildprops_CICD_DIR}/deploy.properties
      echo "artifact.file=${artifactJar}" >>${azure_buildprops_CICD_DIR}/deploy.properties
      echo "artifact.sha1=${artifactJarSHA1}" >>${azure_buildprops_CICD_DIR}/deploy.properties
      echo "artifact.sha256=${artifactJarSHA256}" >>${azure_buildprops_CICD_DIR}/deploy.properties >>${azure_buildprops_CICD_DIR}/deploy.properties 
      echo "artifact.groupId=${groupId}" >>${azure_buildprops_CICD_DIR}/deploy.properties
      echo "artifact.artifactId=${artifactId}" >>${azure_buildprops_CICD_DIR}/deploy.properties
      while IFS='=' read -r key value
        do
        key=$(echo $key | tr '.' '_')
        eval ${key}=\${value}
      done < "${azure_buildprops_CICD_DIR}/deploy.properties"
      ARTIFACT_VERSION=$(grep -oP "Upload to artifactory:
      .*/${artifact_build_version}/${artifactId}-\K(.*).jar"
      ${azure_buildprops_CICD_DIR}/mvn.log | sed -r 's/(.*).jar/\1/')
      echo "artifact.version=${ARTIFACT_VERSION}"
      >>${azure_buildprops_CICD_DIR}/deploy.properties
- task: CopyFiles@2
  inputs:
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deploy'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
   # ArtifactName: 'deploy'
   # publishLocation: 'Container'
