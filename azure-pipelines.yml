# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: DownloadSecureFile@1
  inputs:
    secureFile: 'custom_setup.sh'
- task: Maven@3
  inputs:
    mavenPomFile: 'pom.xml'
    options: '-X -B -s $(mvnSettings.secureFilePath)'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    mavenVersionOption: 'Default'
    mavenAuthenticateFeed: false
    effectivePomSkip: false
    sonarQubeRunAnalysis: false
# - task: Maven@3
# #- task: Maven@3.205.1
#   inputs:
#     mavenPomFile: 'pom.xml'
#     mavenOptions: '-Xmx3072m'
#     javaHomeOption: 'JDKVersion'
#     jdkVersionOption: '1.8'
#     jdkArchitectureOption: 'x64'
#     publishJUnitResults: true
#     testResultsFiles: '**/surefire-reports/TEST-*.xml'
#     goals: 'package'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Write your commands here
      
      #!/bin/sh
      ${azure_buildprops_MAVEN_EXEC} -B -s ${azure_buildprops_MAVEN_SETTINGS}
      -Dsettings.security=${azure_buildprops_MAVEN_SECURITY_SETTINGS} $@ 2>&1 | tee
      ${azure_buildprops_CICD_DIR}/mvn.log
      rc=$?; echo "exit code $rc"; if [[ $rc != 0 ]]; then ( echo 'could not perform
      build'; exit $rc; ) fi
      if [ -d ${azure_build_working_directory}/target/checkout ]; then
        cd ${azure_build_working_directory}/target/checkout
      else
        cd ${azure_build_working_directory}
      fi
      ls -la '**/*.war'
      if grep " BUILD FAILURE" ${azure_buildprops_CICD_DIR}/mvn.log
        then
         echo 'found errors in build log';
      exit 1;
      fi
      export artifactJar=$(**/*.war)
      export artifactJarSHA1=$(sha1sum ${artifactJar} | sed -rn 's/(\w+)\W.*/\1/p')
      export artifactJarSHA256=$(sha256sum ${artifactJar} | sed -rn 's/(\w+)\W.*/\1/p')
      
      org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate -Dexpression=project.version -q -DforceStdout)
      export artifactId=$(${azure_buildprops_MAVEN_EXEC}
      org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate
      -Dexpression=project.artifactId -q -DforceStdout)
      export groupId=$(${azure_buildprops_MAVEN_EXEC}
      org.apache.maven.plugins:maven-help-plugin:3.1.1:evaluate
      -Dexpression=project.groupId -q -DforceStdout)
      ${azure_buildprops_MAVEN_EXEC} -Dmaven.buildNumber.revisionOnScmFailure=NOREVISION -Dmaven.buildNumber.shortRevisionLength=7 buildnumber:create-metadata
      cat target/generated/build-metadata/build.properties | egrep -v
      "^[#|name|timestamp]" | sed 's/^/artifact\.build\./'
      >${azure_buildprops_CICD_DIR}/deploy.properties
      echo "artifact.file=${artifactJar}" >>${azure_buildprops_CICD_DIR}/deploy.properties
      echo "artifact.sha1=${artifactJarSHA1}" >>${azure_buildprops_CICD_DIR}/deploy.properties
      echo "artifact.sha256=${artifactJarSHA256}" >>${azure_buildprops_CICD_DIR}/deploy.properties >>${azure_buildprops_CICD_DIR}/deploy.properties 
      echo "artifact.groupId=${groupId}" >>${azure_buildprops_CICD_DIR}/deploy.properties
      echo "artifact.artifactId=${artifactId}" >>${azure_buildprops_CICD_DIR}/deploy.properties
      while IFS='=' read -r key value
        do
        key=$(echo $key | tr '.' '_')
        eval ${key}=\${value}
      done < "${azure_buildprops_CICD_DIR}/deploy.properties"
      ARTIFACT_VERSION=$(grep -oP "Upload to artifactory:
      .*/${artifact_build_version}/${artifactId}-\K(.*).jar"
      ${azure_buildprops_CICD_DIR}/mvn.log | sed -r 's/(.*).jar/\1/')
      echo "artifact.version=${ARTIFACT_VERSION}"
      >>${azure_buildprops_CICD_DIR}/deploy.properties
- task: CopyFiles@2
  inputs:
    Contents: '**/*.war'
    TargetFolder: '$(build.artifactstagingdirectory)'
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deploy'
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)'
   # ArtifactName: 'deploy'
   # publishLocation: 'Container'
